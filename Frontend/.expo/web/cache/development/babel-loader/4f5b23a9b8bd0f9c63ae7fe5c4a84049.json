{"ast":null,"code":"export var WebBrowserResultType;\n\n(function (WebBrowserResultType) {\n  WebBrowserResultType[\"CANCEL\"] = \"cancel\";\n  WebBrowserResultType[\"DISMISS\"] = \"dismiss\";\n  WebBrowserResultType[\"OPENED\"] = \"opened\";\n  WebBrowserResultType[\"LOCKED\"] = \"locked\";\n})(WebBrowserResultType || (WebBrowserResultType = {}));","map":{"version":3,"sources":["../src/WebBrowser.types.ts"],"names":[],"mappings":"AA8GA,OAAA,IAAY,oBAAZ;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAI9B,EAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AAIA,EAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,oBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CAdD,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC","sourcesContent":["export type RedirectEvent = {\n  url: string;\n};\n\n// @needsAudit @docsMissing\nexport type WebBrowserWindowFeatures = Record<string, number | boolean | string>;\n\n// @needsAudit\nexport type WebBrowserOpenOptions = {\n  /**\n   * Color of the toolbar in either `#AARRGGBB` or `#RRGGBB` format.\n   */\n  toolbarColor?: string;\n  /**\n   * Package name of a browser to be used to handle Custom Tabs. List of\n   * available packages is to be queried by [`getCustomTabsSupportingBrowsers`](#webbrowsergetcustomtabssupportingbrowsersasync) method.\n   * @platform android\n   */\n  browserPackage?: string;\n  /**\n   * A boolean determining whether the toolbar should be hiding when a user scrolls the website.\n   */\n  enableBarCollapsing?: boolean;\n  /**\n   * Color of the secondary toolbar in either `#AARRGGBB` or `#RRGGBB` format.\n   * @platform android\n   */\n  secondaryToolbarColor?: string;\n  /**\n   * A boolean determining whether the browser should show the title of website on the toolbar.\n   * @platform android\n   */\n  showTitle?: boolean;\n  /**\n   * A boolean determining whether a default share item should be added to the menu.\n   * @platform android\n   */\n  enableDefaultShareMenuItem?: boolean;\n  /**\n   * A boolean determining whether browsed website should be shown as separate\n   * entry in Android recents/multitasking view. Requires `createTask` to be `true` (default).\n   * @default false\n   * @platform android\n   */\n  showInRecents?: boolean;\n  /**\n   * A boolean determining whether the browser should open in a new task or in\n   * the same task as your app.\n   * @default true\n   * @platform android\n   */\n  createTask?: boolean;\n  /**\n   * Tint color for controls in SKSafariViewController in `#AARRGGBB` or `#RRGGBB` format.\n   * @platform ios\n   */\n  controlsColor?: string;\n  /**\n   * The style of the dismiss button. Should be one of: `done`, `close`, or `cancel`.\n   * @platform ios\n   */\n  dismissButtonStyle?: 'done' | 'close' | 'cancel';\n  /**\n   * A boolean determining whether Safari should enter Reader mode, if it is available.\n   * @platform ios\n   */\n  readerMode?: boolean;\n  /**\n   * Name to assign to the popup window.\n   * @platform web\n   */\n  windowName?: string;\n  /**\n   * Features to use with `window.open()`.\n   * @platform web\n   */\n  windowFeatures?: string | WebBrowserWindowFeatures;\n};\n\nexport type WebBrowserAuthSessionResult = WebBrowserRedirectResult | WebBrowserResult;\n\n// @needsAudit\nexport type WebBrowserCustomTabsResults = {\n  /**\n   * Default package chosen by user, `null` if there is no such packages. Also `null` usually means,\n   * that user will be prompted to choose from available packages.\n   */\n  defaultBrowserPackage?: string;\n  /**\n   * Package preferred by `CustomTabsClient` to be used to handle Custom Tabs. It favors browser\n   * chosen by user as default, as long as it is present on both `browserPackages` and\n   * `servicePackages` lists. Only such browsers are considered as fully supporting Custom Tabs.\n   * It might be `null` when there is no such browser installed or when default browser is not in\n   * `servicePackages` list.\n   */\n  preferredBrowserPackage?: string;\n  /**\n   * All packages recognized by `PackageManager` as capable of handling Custom Tabs. Empty array\n   * means there is no supporting browsers on device.\n   */\n  browserPackages: string[];\n  /**\n   * All packages recognized by `PackageManager` as capable of handling Custom Tabs Service.\n   * This service is used by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage), [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage)\n   * and [`coolDownAsync`](#webbrowsercooldownasyncbrowserpackage).\n   */\n  servicePackages: string[];\n};\n\n// @needsAudit @docsMissing\nexport enum WebBrowserResultType {\n  /**\n   * @platform ios\n   */\n  CANCEL = 'cancel',\n  /**\n   * @platform ios\n   */\n  DISMISS = 'dismiss',\n  /**\n   * @platform android\n   */\n  OPENED = 'opened',\n  LOCKED = 'locked',\n}\n\n// @needsAudit\nexport type WebBrowserResult = {\n  /**\n   * Type of the result.\n   */\n  type: WebBrowserResultType;\n};\n\n// @needsAudit @docsMissing\nexport type WebBrowserRedirectResult = {\n  /**\n   * Type of the result.\n   */\n  type: 'success';\n  url: string;\n};\n\nexport type ServiceActionResult = {\n  servicePackage?: string;\n};\n\nexport type WebBrowserMayInitWithUrlResult = ServiceActionResult;\nexport type WebBrowserWarmUpResult = ServiceActionResult;\nexport type WebBrowserCoolDownResult = ServiceActionResult;\n\n// @needsAudit\nexport type WebBrowserCompleteAuthSessionOptions = {\n  /**\n   * Attempt to close the window without checking to see if the auth redirect matches the cached redirect URL.\n   */\n  skipRedirectCheck?: boolean;\n};\n\n// @needsAudit\nexport type WebBrowserCompleteAuthSessionResult = {\n  /**\n   * Type of the result.\n   */\n  type: 'success' | 'failed';\n  /**\n   * Additional description or reasoning of the result.\n   */\n  message: string;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}